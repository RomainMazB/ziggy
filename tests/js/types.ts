import route from '../../src/js';

// Add generated routes to use for testing inside this file. In a real app these declarations
// would be in a separate file generated by running `php artisan ziggy:generate --types`.
declare module '../../src/js' {
    interface RouteList {
        'posts.index': [],
        'posts.comments.store': [{ name: 'x' }],
        'posts.comments.show': [{ name: 'post' }, { name: 'comment', binding: 'uuid' }],
        'optional': [{ name: 'maybe' }],
    }
}

// Test route name autocompletion
route();

// Test route parameter name autocompletion
route('posts.comments.store', {});

// TODO once we can detect whether params are required/optional: @ts-expect-error missing required 'post' parameter
route('posts.comments.show', { comment: 2 });

// TODO once we can detect whether params are required/optional: @ts-expect-error missing required 'comment' parameter
route('posts.comments.show', { post: 2 });

// Simple object example
route('posts.comments.show', { post: 2, comment: 9 });
// Allows extra object properties
route('posts.comments.show', { post: 2, comment: 9, foo: 'bar' });
// Allows any property order
route('posts.comments.show', { comment: 2, post: 9 });

// Binding/'routable' object example with default 'id' binding
route('posts.comments.show', { post: { id: 1, foo: 'bar' } });
// Allows extra nested object properties
route('posts.comments.show', { post: { id: 2, foo: 'bar' } });
// @ts-expect-error missing 'id' key in post parameter object
route('posts.comments.show', { post: { foo: 'bar' } });

// Binding/'routable' object example with custom 'uuid' binding
route('posts.comments.show', { comment: { uuid: 1 } });
// Allows extra nested object properties
route('posts.comments.show', { comment: { uuid: 1, foo: 'bar' } });
// @ts-expect-error missing 'uuid' key in comment parameter object
route('posts.comments.show', { comment: { foo: 'bar' } });
// @ts-expect-error missing 'uuid' key in comment parameter object
// 'id' doesn't fix it because 'id' is the default/fallback but this
// parameter has an explicit 'uuid' binding, so that's required :)
route('posts.comments.show', { comment: { id: 2 } });

// Simple array examples
route('posts.comments.show', [2, 3]);
route('posts.comments.show', ['foo', 'bar']);
// Allows mix of plain values and parameter objects
route('posts.comments.show', [{ id: 2 }, 3]);
route('posts.comments.show', ['2', { uuid: 3 }]);
route('posts.comments.show', [{ id: 2 }, { uuid: '3' }]);

// @ts-expect-error missing 'id' in post parameter object
route('posts.comments.show', [{ x: 2 }, { uuid: 3 }]);
// @ts-expect-error missing 'uuid' key in comment parameter object
route('posts.comments.show', [{ id: 2 }, { id: 3 }]);

// Allows extra array items after know parameters
route('posts.comments.show', [{ id: 2 }, { uuid: 3 }, { x: 'y' }]);
route('posts.comments.show', [1, 'foo', 3]);

// Unknown route example
route('foo');
// Allows any object params
route('foo', { bar: { f: 'x' } });
// Allows any array params
route('foo', [{ x: 'x' }, 2, 'foo']);

// Test router method autocompletion
route().has('');

// Test router getter autocompletion
route().params;
